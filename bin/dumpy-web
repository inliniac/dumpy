#! /usr/bin/env python
#
# Copyright (c) 2012 Jason Ish
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from __future__ import print_function

import sys
import os
import getopt
import logging
try:
    from configparser import SafeConfigParser
except:
    from ConfigParser import SafeConfigParser

# This is so we can run out of the source directory, no matter what
# the users current directory is.
sys.path.insert(0, os.path.dirname(
        os.path.dirname(os.path.abspath(sys.argv[0]))))

logging.basicConfig(level=logging.DEBUG,
                    format="%(asctime)s %(levelname)s %(message)s")

import dumpy.web

def usage(file):
    print("""
usage: %(progname)s [options]

options:

  -c <file>      configuration file (default: ./etc/dumpy.conf)
""" % {"progname": sys.argv[0]})

def main():

    logger = logging.getLogger()

    options = {
        "config-filename": "./etc/config",
        }

    try:
        opts, args = getopt.getopt(sys.argv[1:], "c:")
    except getopt.GetoptError as err:
        print("error: %s" % err, file=sys.stderr)
        usage(sys.stderr)
        return 1
    for o, a in opts:
        if o == "-c":
            options["config-filename"] = a

    if not os.path.exists(options["config-filename"]):
        print("error: configuration file not found: %s" % (
                options["config-filename"]), file=sys.stderr)
        return 1

    configuration = SafeConfigParser()
    configuration.read(options["config-filename"])

    try:
        return dumpy.web.run(configuration)
    except KeyboardInterrupt:
        return 0
    except:
        raise

if __name__ == "__main__":
    sys.exit(main())
